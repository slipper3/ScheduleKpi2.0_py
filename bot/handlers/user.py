from aiogram import Bot, types, Router
from aiogram.filters import Command
from bot_intance import bot

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from bot.data.groupdata import *
from bot.utils.texts import *
from bot.keyboards.keyboards import *
from bot.utils.log_conf import setup_logging

import os
from dotenv import load_dotenv

load_dotenv()

user_router = Router()

logger = setup_logging()

@user_router.message(Command("start"))
async def start(message: types.Message) -> None:
    await message.answer(await start_text(), reply_markup=await start_keyboard(), parse_mode='HTML')


@user_router.message(Command("info"))
async def info(message: types.Message) -> None:
    await message.answer(await info_text(), reply_markup=await info_keyboard(), parse_mode='HTML')


@user_router.message(Command("menu"))
async def menu(message: types.Message) -> None:
    await message.answer(await menu_text(), reply_markup=await menu_keyboard(), parse_mode='HTML')

# --- Set group
class gstates(StatesGroup):
    group = State()
    pas = State()
@user_router.message(Command("set"))
async def set_group(message: types.Message, state: FSMContext) -> None:
    if await db_get_group(message.chat.id) == None:
        await state.set_state(gstates.group)
        await message.answer("–í–∫–∞–∂—ñ—Ç—å –≥—Ä—É–ø—É")
    else: 
        await message.answer("–£ –≤–∞—à–æ–º—É —á–∞—Ç—ñ —É–∂–µ –∑–∞–∫—Ä–∏–ø–ª–µ–Ω–∞ –≥—Ä—É–ø–∞")
@user_router.message(gstates.group)
async def save_group(message: types.Message, state: FSMContext) -> None:
    if await db_save_group(message.chat.id, message.text):
        await message.answer("–ì—Ä—É–ø–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞\n\n–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É\n–ù–∞–ø–∏—à—ñ—Ç—å d —è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º \"1111\"")
        await state.set_state(gstates.pas)
    else: 
        await message.answer("<b>–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç!</b>\n–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω–Ω—ñ –∞–±–æ —Ç–∞–∫–∞ –≥—Ä—É–ø–∞ –≤–∂–µ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∞ –∑–∞ —ñ–Ω—à–∏–º —á–∞—Ç–æ–º", parse_mode="HTML")
        logger.warning(f"User: {message.from_user.id}, tryed link {message.text} group! Group was not linked!")
        await state.clear()
@user_router.message(gstates.pas)
async def set_passeord(message: types.Message, state: FSMContext):
    if message.text == "d":
        message.answer("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
    else:
        db_set_password(message.chat.id, message.text)
    await state.clear()

# --- Remove group
@user_router.message(Command("remove"))
async def remove_group(message: types.Message) -> None:
    if await db_remove_group(message.chat.id):
        await message.answer("–ì—Ä—É–ø–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞")
    else: await message.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏")

# --- Show group
@user_router.message(Command("get"))
async def get_group(message: types.Message) -> None:
    groupName = await db_get_group(message.chat.id)
    if groupName != None:
        await message.answer(f"–í–∞—à–∞ –≥—Ä—É–ø–∞: {groupName}")
    else: await message.answer("–î–æ –≤–∞—à–æ–≥–æ —á–∞—Ç—É –≥—Ä—É–ø–∞ –Ω–µ –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∞")

# --- Change emoji status
@user_router.message(Command("emoji"))
async def config_emoji(message: types.Message) -> None:
    status = await db_condig_emoji(message.chat.id)
    await message.answer(f"–°—Ç–∞—Ç—É—Å –µ–º–æ–¥–∂—ñ –≤ –≤–∞—à–æ–º—É —á–∞—Ç—ñ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {status}")

# --- Show link to site
@user_router.message(Command("wed"))
async def web(message: types.Message) -> None:
    await message.answer("–¢—É—Ç –±—É–¥–µ –ª—ñ–Ω–∫ –Ω–∞ —Å–∞–π—Ç")

# --- Send report to developer
class rstates(StatesGroup):
    rep = State()
@user_router.message(Command("report"))
async def get_report(message: types.Message, state: FSMContext) -> None:
    await state.set_state(rstates.rep)
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è üìù")
@user_router.message(rstates.rep)
async def send_report(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(chat_id=int(os.getenv("ADMIN_ID")), text=f"#report\n\nUserid=<code>{message.from_user.id}</code>\nUsername={message.from_user.first_name} {message.from_user.last_name}\nUsername=<code>{message.from_user.username}</code>\nChatid=<code>{message.chat.id}</code>\n\n{message.text}", parse_mode="HTML")
    await message.answer("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.")
    await state.clear()

# --- Change pass
class pstates(StatesGroup):
    old_pas = State()
    pas = State()
@user_router.message(Command("ch_pass"))
async def chenge_password(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å: ")
    await state.set_state(pstates.old_pas)
@user_router.message(pstates.old_pas)
async def save_password(message: types.Message, state: FSMContext):
    if message.text == await db_get_password(message.chat.id):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å: ")
        await state.set_state(pstates.pas)
    elif await db_get_password(message.chat.id) == False:
        await message.answer("üü° –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É")
        await state.clear()
    else:
        await message.answer("üî¥ –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å")
        await state.clear()
@user_router.message(pstates.pas)
async def save_password(message: types.Message, state: FSMContext):
    if await db_set_password(message.chat.id, message.text) == True:
        await message.answer("üü¢ –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ")
        await state.clear()
    else: 
        await message.answer("üü° –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É")
        await state.clear()

# @user_router.message(Command("sh_pass"))
# async def show_password(message: types.Message):
#     await message.answer()